/******************************************************************************
 * Targoman: A robust Statistical Machine Translation framework               *
 *                                                                            *
 * Copyright 2014-2015 by ITRC <http://itrc.ac.ir>                            *
 *                                                                            *
 * This file is part of Targoman.                                             *
 *                                                                            *
 * Targoman is free software: you can redistribute it and/or modify           *
 * it under the terms of the GNU Lesser General Public License as published   *
 * by the Free Software Foundation, either version 3 of the License, or       *
 * (at your option) any later version.                                        *
 *                                                                            *
 * Targoman is distributed in the hope that it will be useful,                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU Lesser General Public License for more details.                        *
 * You should have received a copy of the GNU Lesser General Public License   *
 * along with Targoman. If not, see <http://www.gnu.org/licenses/>.           *
 *                                                                            *
 ******************************************************************************/
/**
 * @author Behrooz Vedadian <vedadian@targoman.com>
 * @author Saeed Torabzadeh <saeed.torabzadeh@targoman.com>
 */


#include "UnitTest.h"
#include <typeinfo>

namespace UnitTestNameSpace {

double PredictableRandom() {
    static double RandomNumbers[] = {
        0.01184077575419233,0.657047673855945,0.7375899669153538,0.01343569527632653,
        0.594520429575579,0.5093600773537362,0.875167194671238,0.7768423653841101,
        0.6595288623386456,0.6388674527713351,0.1801979656624738,0.2675455981095854,
        0.6206405979650917,0.3795409840854801,0.09177038136555453,0.3413435382949364,
        0.5118511353134692,0.04474944763826998,0.1961239318313073,0.3505401057018899,
        0.1471066167802794,0.3627514273413401,0.6640698161085999,0.7559176531660791,
        0.4305298200139718,0.2464116022450291,0.08959069571284477,0.6556223326372822,
        0.3746575970130877,0.1615519191467908,0.3479657118830977,0.5971275084328571,
        0.3168547837804244,0.7370922866948422,0.3332780864388161,0.4195245971426614,
        0.2091953560988642,0.2167068505238404,0.2144373967767012,0.47453488398252,
        0.06826052355324878,0.9851015555361087,0.2304502369741546,0.3194665011595478,
        0.02253497682126364,0.8128882522663163,0.5851797641232794,0.4397158669289217,
        0.023722229725805,0.7567866737756835,0.6084139085521014,0.6667119018147768,
        0.152408208692061,0.9921830221190273,0.4793543017283461,0.7554008381463627,
        0.4691994276752123,0.738305937725898,0.09395861982757085,0.2294885834680162,
        0.6671018418634515,0.07887002191392804,0.3571375569666898,0.8695170903236353,
        0.2296102100994895,0.8425280146995352,0.2253181937389531,0.6828734808392151,
        0.837004724421551,0.2221032346428845,0.4865613755651862,0.5116912767119123,
        0.6583057799563722,0.8900776428170554,0.440774485971885,0.6769071351661348,
        0.2240922284875653,0.9070764256447307,0.1033008880187167,0.5224012540745724,
        0.7615726087761473,0.7876657153538323,0.4358994128801395,0.6461653875865235,
        0.1886269995233268,0.4990747916049799,0.9504169662432669,0.207636788058716,
        0.1798734016897752,0.008265435377621189,0.8855022858439876,0.9233849762267781,
        0.880239263892854,0.07569569872946773,0.8866370458784936,0.6565502327855112,
        0.7826839777786709,0.516652091398825,0.3177406536103466,0.9935489990115428,
        0.4893131172384412,0.5876786292214856,0.2375533613531058,0.4389289585460899,
        0.7725263175757029,0.5482993755322069,0.4303079891872969,0.2166111970416993,
        0.2325113639570104,0.6904123421388713,0.3554370394781117,0.2636056866808479,
        0.3184541008382351,0.3155889125510891,0.1539644300132325,0.7216391583201395,
        0.2171522781904048,0.4444023864552822,0.2256402596551829,0.4515690073964178,
        0.05877324821765843,0.1419935421562079,0.1184333561047535,0.03686210033631936,
        0.886270066192916,0.6832151206672448,0.524932647486571,0.7353564725540697,
        0.3283567425630069,0.7528947894821019,0.8839785768560141,0.2260805812097207,
        0.570884459868515,0.2007113626009064,0.6438476472354379,0.8047477072360359,
        0.3334534572610167,0.9685287543457154,0.1674705396613135,0.4803239450639898,
        0.877402199809636,0.09022952802790545,0.5558571504722815,0.4847381888931827,
        0.5958556703331997,0.7364236082915024,0.5117518082337127,0.7787812700700197,
        0.1478533038717697,0.2643056425872805,0.1716864772046271,0.2713299461668575,
        0.2628208452586494,0.3435436073196491,0.4536338286434398,0.7747871446252118,
        0.9836575803567942,0.5360217807042594,0.9817945913404836,0.7977734041580937,
        0.5872457827789838,0.7571437102515595,0.344656349231945,0.6875874233302613,
        0.9616677351688899,0.4843486240102009,0.08628615217139217,0.4860757605545973,
        0.3330313349426871,0.6553337551393911,0.7378323279412824,0.2192584225829701,
        0.07521248487287617,0.8288321541808633,0.1671878185991928,0.7080081466360748,
        0.1769376357246447,0.172563860891963,0.4149332762999945,0.092944388382369,
        0.7316453107041958,0.7531291621748311,0.1886367742030911,0.08513568226928329,
        0.8992433167634045,0.7412382763630951,0.6433110801235533,0.9177503346681894,
        0.4063030103820789,0.1155210859572856,0.42668009503057,0.1445664952613291,
        0.62296048418382,0.8907316307088374,0.8234551980495866,0.3738160259704489,
        0.03529618881383638,0.710864975710919,0.2950194330960157,0.7103012653481744
    };
    static int Position = 0;
    static int Size = sizeof RandomNumbers / sizeof RandomNumbers[0];
    Position = (Position + 1) % Size;
    return RandomNumbers[Position];
}


void clsUnitTest::initTestCase()
{

}

clsUnitTest::~clsUnitTest() {

}

clsUnitTest::clsUnitTest() {

}

Coverage_t  clsUnitTest::makeCoverageByString(QString _coverageString)
{
    Coverage_t coverage;
    coverage.resize(_coverageString.size());
    for(int charIndex = 0; charIndex < coverage.size(); ++charIndex)
        _coverageString.at(charIndex) == '0' ? coverage.clearBit(charIndex) : coverage.setBit(charIndex);
    return coverage;
}


}
QTEST_MAIN(UnitTestNameSpace::clsUnitTest)


